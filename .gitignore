# ========================================
# 🎓 Flask Web開発学習教材プロジェクト
# ========================================
# このプロジェクトは、非エンジニア向けのWeb開発学習教材です
# Step1: Flask基礎 + 仮想環境
# Step2: HTMLテンプレート + CSS  
# Step3: JavaScript DOM操作（予定）
# Step4: Form送信とPOST処理（予定）
# Step5: データベース連携（予定）
#
# 📚 学習ドキュメント: docs/01_コンピューター基礎知識/14_応用_.gitignoreとファイル管理.md
# 🔗 リポジトリ: https://github.com/Monzi-takuya/web-tutorial
# ========================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE/Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
*.bak

# Flask development database (if using SQLite)
*.db

# Node.js (if you add frontend build tools later)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# ========================================
# 🎓 学習教材固有の設定
# ========================================
# 学習に必要なファイルのみをGitで管理し、
# 学習者の個人的な練習ファイルは除外します

# 学習者の練習用フォルダ
practice/
sandbox/
experiments/
my_practice/

# 過去ファイル
bk/

# 個人的なメモ・ノート
personal_notes.md
my_notes.txt
memo.txt
TODO.md
学習メモ.md
memo

# 一時的な練習ファイル
temp_*.py
test_*.html
debug_*.js
試作_*
テスト用_*

# 学習者が作成する可能性のある設定ファイル
.env.local
config_personal.py
my_config.json

# ========================================
# 📝 学習者へのメモ
# ========================================
# このプロジェクトをフォークして学習する場合:
# 1. 上記のパターンに従って個人ファイルを作成してください
# 2. 機密情報（パスワード等）は絶対にコミットしないでください  
# 3. 詳しくは docs/01_コンピューター基礎知識/14_応用_.gitignoreとファイル管理.md をご覧ください